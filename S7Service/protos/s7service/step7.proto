syntax = "proto3";

option java_multiple_files = true;
option java_package = "step7";
option java_outer_classname = "Step7";
option objc_class_prefix = "S7";

package s7service;


service Step7 {

  // Create new empty STEP 7 project
  rpc CreateProject (CreateProjectRequest) returns (StatusReply) {}
    // Create new empty STEP 7 library
  rpc CreateLibrary (CreateLibraryRequest) returns (StatusReply) {}
  // Registers existing STEP 7 project
  rpc RegisterProject (RegisterProjectRequest) returns (StatusReply) {}
  // Removes STEP 7 project and deletes all of its files
  rpc RemoveProject (RemoveProjectRequest) returns (StatusReply) {}

  // Import source into a program
  rpc ImportSource (ImportSourceRequest) returns (StatusReply){}
  // Import sources from a directory into a project
  rpc ImportSourcesDir (ImportSourcesDirRequest) returns (StatusReply) {}
  // Import sources from a library into project
  rpc ImportLibSources (ImportLibSourcesRequest) returns (StatusReply) {}
  // Exports a source from a program to a directory
  rpc ExportSource (ExportSourceRequest) returns (StatusReply) {}
  // Exports all sources from a program to a directory
  rpc ExportAllSources (ExportAllSourcesRequest) returns (StatusReply) {}

  // Compile specified source code module
  rpc CompileSource (CompileSourceRequest) returns (StatusReply) {}
  // Compile multiple source code modules, in given order
  rpc CompileSources (CompileSourcesRequest) returns (StatusReply) {}

  // Import blocks from a library into project
  rpc ImportLibBlocks (ImportLibBlocksRequest) returns (StatusReply) {}
  // Imports symbols into a program from a file
  rpc ImportSymbols (ImportSymbolsRequest) returns (StatusReply) {}
  // Exports symbols from program from into a file
  rpc ExportSymbols (ExportSymbolsRequest) returns (StatusReply) {}
  
  // Compiles the HW configuration for each of the stations in a project
  rpc CompileAllStations (CompileAllStationsRequest) returns (StatusReply) {}

  // TODO: List functions could return better replies with more data...

  // Creates list with project names
  rpc ListProjects (ListProjectsRequest) returns (ListReply) {}
  // Creates list with programs in a given project
  rpc ListPrograms (ListProgramsRequest) returns (ListReply) {}
  // Creates list with stations in a given project
  rpc ListStations (ListStationsRequest) returns (ListReply) {}
  // Creates list with containers for each program in a given project
  rpc ListContainers (ListContainersRequest) returns (ListReply) {}

  // Edits properties of target module
  rpc EditModule (EditModuleRequest) returns (StatusReply) {}

  // [ONLINE] Starts/restarts a program
  rpc StartProgram (StartProgramRequest) returns (StatusReply) {}
  // [ONLINE] Stops a program
  rpc StopProgram (StopProgramRequest) returns (StatusReply) {}
  // [ONLINE] Downloads all the blocks under a Program
  rpc DownloadProgramBlocks (DownloadProgramBlocksRequest) returns (StatusReply) {}
}

// Request messages

message CreateProjectRequest {
  // Project name (max 8 characters)
  string projectName = 1;
  // Path to project's parent directory
  string projectDir = 2;
}

message CreateLibraryRequest {
  // Library name (max 8 characters)
  string projectName = 1;
  // Path to library's parent directory
  string projectDir = 2;
}

message RegisterProjectRequest {
  // Path to STEP 7 project file .s7p
  string projectFilePath = 1;
}

message RemoveProjectRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
}

message ImportSourceRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Program name
  string program = 2;
  // Path to source file
  string source = 3;
  // Force overwrite existing source in project
  bool overwrite = 4;
}

message ImportSourcesDirRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Program name
  string program = 2;
  // Directory from which to import sources
  string sourcesDir = 3;
  // Force overwrite existing sources in project
  bool overwrite = 4;
}

message ImportLibSourcesRequest {
  // Source library id, path to .s7l (unique) or library name
  string library = 1;
  // Source library program name
  string libProgram = 2;
  // Destination project id, path to .s7p (unique) or project name
  string project = 3;
  // Destination program name
  string projProgram = 4;
  // Force overwrite existing sources in destination project
  bool overwrite = 5;
}

message ExportAllSourcesRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Program name
  string program = 2;
  // Directory to which to export sources
  string sourcesDir = 3;
}

message ExportSourceRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Program name
  string program = 2;
  // Source name
  string source = 3;
  // Directory to which to export sources
  string sourcesDir = 4;
}

message CompileSourceRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Program name
  string program = 2;
  // Source name
  string source = 3;
}

message CompileSourcesRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Program name
  string program = 2;
  // Ordered list of source names
  repeated string sources = 3;
}

message ImportLibBlocksRequest {
  // Source library id, path to .s7l (unique) or library name
  string library = 1;
  // Source library program name
  string libProgram = 2;
  // Destination project id, path to .s7p (unique) or project name
  string project = 3;
  // Destination program name
  string projProgram = 4;
  // Force overwrite existing blocks in destination project
  bool overwrite = 5;
}

message ImportSymbolsRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Logical path to program
  string programPath = 2;
  // Path to input symbol table file (usually .sdf)
  //   Supported extensions .asc, .dif, .sdf, .seq
  string symbolFile = 3;
  // Symbol import flag (S7SymImportFlags)
  enum SymbolImportFlag {
    // S7SymImportInsert - Symbols are imported even if present, which may lead to ambiguities
    INSERT = 0;
    // S7SymImportOverwriteNameLeading - existing values with the same symbol name are replaced. 
    // The addresses are adjusted according to the specifications in the import file.
    OVERWRITE_ADDRESS = 1;
    // S7SymImportOverwriteOperandLeading - existing values with identical addresses are replaced.
    // Symbol names are adjusted to the specifications in the import file.
    OVERWRITE_NAME = 2; 
  }
  SymbolImportFlag flag = 4;
  // Succeed (return 0) even if conflits are detected
  bool allowConflicts = 5;
}

message ExportSymbolsRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Logical path to program
  string programPath = 2;
  // Path to output symbol table file (usually .sdf)
  // Supported extensions .asc, .dif, .sdf, .seq
  string symbolFile = 3;
  // Overwrite output file if it exists
  bool overwrite = 4;
}

message CompileAllStationsRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Succeed (return 0) even if unable to compile some station
  bool allowFail = 2;
}

message ListProjectsRequest { }

message ListProgramsRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
}

message ListStationsRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
}

message ListContainersRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
}

message StartProgramRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Station name
  string station = 2;
  // Parent module name
  string module = 3;
  // Program name
  string program = 4;
}

message StopProgramRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Station name
  string station = 2;
  // Parent module name
  string module = 3;
  // Program name
  string program = 4;
}

message DownloadProgramBlocksRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Station name
  string station = 2;
  // Parent module name
  string module = 3;
  // Program name
  string program = 4;
  // Force overwrite of online blocks
  bool overwrite = 5;
}

message EditModuleRequest {
  // Project identifier, path to .s7p (unique) or project name
  string project = 1;
  // Station name
  string station = 2;
  // Rack name
  string rack = 3;
  // Logical path to module
  string module = 4;
  // New module properties
  map<string, string> properties = 5;
}

// Reply messages

message StatusReply {
  // Request exit code
  int32 exitCode = 1;
  // Logs
  repeated string log = 2;
}

message ListReply {
  StatusReply status = 1;
  repeated string items = 2;
}
